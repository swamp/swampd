struct Server {
    timer_calls: Int,
}

enum ToServer {
    Login Int,
}

enum ToClient {
    Pong Int,
}

struct Datagrams {
}

impl Datagrams {
    external 10 fn send(self, any: Any)
    external 11 fn id(self) -> Int
}

impl Server {
    #[host_call]
    fn on_connected(mut self, conn: Datagrams) {
        print('nice! someone connected {conn.id()}')
    }

    #[host_call]
    fn on_disconnected(mut self, connection_id: Int) {
        print('someone disconnected {connection_id}')
    }

    #[host_call]
    fn timer(mut self) {
        self.timer_calls += 1
        print('timer called! time:{self.timer_calls}')
    }

    #[host_call]
    fn on_msg(mut self, msg: ToServer, conn: Datagrams) {
        print('on msg {msg} time:{self.timer_calls}')
        conn.send(ToClient::Pong(42))
    }

}

#[host_call]
fn main() -> Server {

    print('server boot up')

    Server {..}

}
